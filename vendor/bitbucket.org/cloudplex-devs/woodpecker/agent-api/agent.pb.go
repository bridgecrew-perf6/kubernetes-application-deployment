// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent.proto

package agent_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PingMessage struct {
	Greeting             string   `protobuf:"bytes,1,opt,name=greeting,proto3" json:"greeting,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingMessage) Reset()         { *m = PingMessage{} }
func (m *PingMessage) String() string { return proto.CompactTextString(m) }
func (*PingMessage) ProtoMessage()    {}
func (*PingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{0}
}

func (m *PingMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingMessage.Unmarshal(m, b)
}
func (m *PingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingMessage.Marshal(b, m, deterministic)
}
func (m *PingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingMessage.Merge(m, src)
}
func (m *PingMessage) XXX_Size() int {
	return xxx_messageInfo_PingMessage.Size(m)
}
func (m *PingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PingMessage proto.InternalMessageInfo

func (m *PingMessage) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

//https://jbrandhorst.com/post/grpc-binary-blob-stream/
type Chunk struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{1}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

//
//Payload for running kubectl command
type ExecKubectlRequest struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args                 []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecKubectlRequest) Reset()         { *m = ExecKubectlRequest{} }
func (m *ExecKubectlRequest) String() string { return proto.CompactTextString(m) }
func (*ExecKubectlRequest) ProtoMessage()    {}
func (*ExecKubectlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{2}
}

func (m *ExecKubectlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecKubectlRequest.Unmarshal(m, b)
}
func (m *ExecKubectlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecKubectlRequest.Marshal(b, m, deterministic)
}
func (m *ExecKubectlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecKubectlRequest.Merge(m, src)
}
func (m *ExecKubectlRequest) XXX_Size() int {
	return xxx_messageInfo_ExecKubectlRequest.Size(m)
}
func (m *ExecKubectlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecKubectlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecKubectlRequest proto.InternalMessageInfo

func (m *ExecKubectlRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *ExecKubectlRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ExecKubectlResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Stdout               []string `protobuf:"bytes,2,rep,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr               []string `protobuf:"bytes,3,rep,name=stderr,proto3" json:"stderr,omitempty"`
	Command              string   `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecKubectlResponse) Reset()         { *m = ExecKubectlResponse{} }
func (m *ExecKubectlResponse) String() string { return proto.CompactTextString(m) }
func (*ExecKubectlResponse) ProtoMessage()    {}
func (*ExecKubectlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{3}
}

func (m *ExecKubectlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecKubectlResponse.Unmarshal(m, b)
}
func (m *ExecKubectlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecKubectlResponse.Marshal(b, m, deterministic)
}
func (m *ExecKubectlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecKubectlResponse.Merge(m, src)
}
func (m *ExecKubectlResponse) XXX_Size() int {
	return xxx_messageInfo_ExecKubectlResponse.Size(m)
}
func (m *ExecKubectlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecKubectlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecKubectlResponse proto.InternalMessageInfo

func (m *ExecKubectlResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ExecKubectlResponse) GetStdout() []string {
	if m != nil {
		return m.Stdout
	}
	return nil
}

func (m *ExecKubectlResponse) GetStderr() []string {
	if m != nil {
		return m.Stderr
	}
	return nil
}

func (m *ExecKubectlResponse) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

//
//Payload for creating file
type CreateFileRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Files                []*File  `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateFileRequest) Reset()         { *m = CreateFileRequest{} }
func (m *CreateFileRequest) String() string { return proto.CompactTextString(m) }
func (*CreateFileRequest) ProtoMessage()    {}
func (*CreateFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{4}
}

func (m *CreateFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFileRequest.Unmarshal(m, b)
}
func (m *CreateFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFileRequest.Marshal(b, m, deterministic)
}
func (m *CreateFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFileRequest.Merge(m, src)
}
func (m *CreateFileRequest) XXX_Size() int {
	return xxx_messageInfo_CreateFileRequest.Size(m)
}
func (m *CreateFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFileRequest proto.InternalMessageInfo

func (m *CreateFileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateFileRequest) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type File struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{5}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *File) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type FileResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                []string `protobuf:"bytes,2,rep,name=error,proto3" json:"error,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Path                 string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileResponse) Reset()         { *m = FileResponse{} }
func (m *FileResponse) String() string { return proto.CompactTextString(m) }
func (*FileResponse) ProtoMessage()    {}
func (*FileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{6}
}

func (m *FileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileResponse.Unmarshal(m, b)
}
func (m *FileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileResponse.Marshal(b, m, deterministic)
}
func (m *FileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileResponse.Merge(m, src)
}
func (m *FileResponse) XXX_Size() int {
	return xxx_messageInfo_FileResponse.Size(m)
}
func (m *FileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FileResponse proto.InternalMessageInfo

func (m *FileResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *FileResponse) GetError() []string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *FileResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

//
//Payload for http api
type HttpRequest struct {
	Url                  string     `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	RequestType          string     `protobuf:"bytes,2,opt,name=requestType,proto3" json:"requestType,omitempty"`
	Headers              []*Headers `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	Body                 string     `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *HttpRequest) Reset()         { *m = HttpRequest{} }
func (m *HttpRequest) String() string { return proto.CompactTextString(m) }
func (*HttpRequest) ProtoMessage()    {}
func (*HttpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{7}
}

func (m *HttpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpRequest.Unmarshal(m, b)
}
func (m *HttpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpRequest.Marshal(b, m, deterministic)
}
func (m *HttpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpRequest.Merge(m, src)
}
func (m *HttpRequest) XXX_Size() int {
	return xxx_messageInfo_HttpRequest.Size(m)
}
func (m *HttpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HttpRequest proto.InternalMessageInfo

func (m *HttpRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HttpRequest) GetRequestType() string {
	if m != nil {
		return m.RequestType
	}
	return ""
}

func (m *HttpRequest) GetHeaders() []*Headers {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HttpRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type Headers struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Headers) Reset()         { *m = Headers{} }
func (m *Headers) String() string { return proto.CompactTextString(m) }
func (*Headers) ProtoMessage()    {}
func (*Headers) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{8}
}

func (m *Headers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Headers.Unmarshal(m, b)
}
func (m *Headers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Headers.Marshal(b, m, deterministic)
}
func (m *Headers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Headers.Merge(m, src)
}
func (m *Headers) XXX_Size() int {
	return xxx_messageInfo_Headers.Size(m)
}
func (m *Headers) XXX_DiscardUnknown() {
	xxx_messageInfo_Headers.DiscardUnknown(m)
}

var xxx_messageInfo_Headers proto.InternalMessageInfo

func (m *Headers) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Headers) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type HttpResponse struct {
	Body                 []byte     `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Error                string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ResponseCode         int32      `protobuf:"varint,3,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	Headers              []*Headers `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *HttpResponse) Reset()         { *m = HttpResponse{} }
func (m *HttpResponse) String() string { return proto.CompactTextString(m) }
func (*HttpResponse) ProtoMessage()    {}
func (*HttpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{9}
}

func (m *HttpResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpResponse.Unmarshal(m, b)
}
func (m *HttpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpResponse.Marshal(b, m, deterministic)
}
func (m *HttpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpResponse.Merge(m, src)
}
func (m *HttpResponse) XXX_Size() int {
	return xxx_messageInfo_HttpResponse.Size(m)
}
func (m *HttpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HttpResponse proto.InternalMessageInfo

func (m *HttpResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *HttpResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *HttpResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *HttpResponse) GetHeaders() []*Headers {
	if m != nil {
		return m.Headers
	}
	return nil
}

type SSHRequest struct {
	Server               string   `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	User                 string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Cmd                  []string `protobuf:"bytes,4,rep,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSHRequest) Reset()         { *m = SSHRequest{} }
func (m *SSHRequest) String() string { return proto.CompactTextString(m) }
func (*SSHRequest) ProtoMessage()    {}
func (*SSHRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{10}
}

func (m *SSHRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSHRequest.Unmarshal(m, b)
}
func (m *SSHRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSHRequest.Marshal(b, m, deterministic)
}
func (m *SSHRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSHRequest.Merge(m, src)
}
func (m *SSHRequest) XXX_Size() int {
	return xxx_messageInfo_SSHRequest.Size(m)
}
func (m *SSHRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SSHRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SSHRequest proto.InternalMessageInfo

func (m *SSHRequest) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *SSHRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SSHRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SSHRequest) GetCmd() []string {
	if m != nil {
		return m.Cmd
	}
	return nil
}

type SSHRequestUnary struct {
	Server               string   `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	User                 string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Cmd                  string   `protobuf:"bytes,4,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSHRequestUnary) Reset()         { *m = SSHRequestUnary{} }
func (m *SSHRequestUnary) String() string { return proto.CompactTextString(m) }
func (*SSHRequestUnary) ProtoMessage()    {}
func (*SSHRequestUnary) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{11}
}

func (m *SSHRequestUnary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSHRequestUnary.Unmarshal(m, b)
}
func (m *SSHRequestUnary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSHRequestUnary.Marshal(b, m, deterministic)
}
func (m *SSHRequestUnary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSHRequestUnary.Merge(m, src)
}
func (m *SSHRequestUnary) XXX_Size() int {
	return xxx_messageInfo_SSHRequestUnary.Size(m)
}
func (m *SSHRequestUnary) XXX_DiscardUnknown() {
	xxx_messageInfo_SSHRequestUnary.DiscardUnknown(m)
}

var xxx_messageInfo_SSHRequestUnary proto.InternalMessageInfo

func (m *SSHRequestUnary) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *SSHRequestUnary) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SSHRequestUnary) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SSHRequestUnary) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type SSHResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Stdout               string   `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr               string   `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Command              string   `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSHResponse) Reset()         { *m = SSHResponse{} }
func (m *SSHResponse) String() string { return proto.CompactTextString(m) }
func (*SSHResponse) ProtoMessage()    {}
func (*SSHResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{12}
}

func (m *SSHResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSHResponse.Unmarshal(m, b)
}
func (m *SSHResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSHResponse.Marshal(b, m, deterministic)
}
func (m *SSHResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSHResponse.Merge(m, src)
}
func (m *SSHResponse) XXX_Size() int {
	return xxx_messageInfo_SSHResponse.Size(m)
}
func (m *SSHResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SSHResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SSHResponse proto.InternalMessageInfo

func (m *SSHResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SSHResponse) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *SSHResponse) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *SSHResponse) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type SCPRequest struct {
	Server               string   `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	User                 string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Files                []*File  `protobuf:"bytes,4,rep,name=Files,proto3" json:"Files,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SCPRequest) Reset()         { *m = SCPRequest{} }
func (m *SCPRequest) String() string { return proto.CompactTextString(m) }
func (*SCPRequest) ProtoMessage()    {}
func (*SCPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{13}
}

func (m *SCPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SCPRequest.Unmarshal(m, b)
}
func (m *SCPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SCPRequest.Marshal(b, m, deterministic)
}
func (m *SCPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCPRequest.Merge(m, src)
}
func (m *SCPRequest) XXX_Size() int {
	return xxx_messageInfo_SCPRequest.Size(m)
}
func (m *SCPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SCPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SCPRequest proto.InternalMessageInfo

func (m *SCPRequest) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *SCPRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SCPRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SCPRequest) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type SCPRequestUnary struct {
	Server               string   `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	User                 string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Files                *File    `protobuf:"bytes,4,opt,name=Files,proto3" json:"Files,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SCPRequestUnary) Reset()         { *m = SCPRequestUnary{} }
func (m *SCPRequestUnary) String() string { return proto.CompactTextString(m) }
func (*SCPRequestUnary) ProtoMessage()    {}
func (*SCPRequestUnary) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{14}
}

func (m *SCPRequestUnary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SCPRequestUnary.Unmarshal(m, b)
}
func (m *SCPRequestUnary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SCPRequestUnary.Marshal(b, m, deterministic)
}
func (m *SCPRequestUnary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCPRequestUnary.Merge(m, src)
}
func (m *SCPRequestUnary) XXX_Size() int {
	return xxx_messageInfo_SCPRequestUnary.Size(m)
}
func (m *SCPRequestUnary) XXX_DiscardUnknown() {
	xxx_messageInfo_SCPRequestUnary.DiscardUnknown(m)
}

var xxx_messageInfo_SCPRequestUnary proto.InternalMessageInfo

func (m *SCPRequestUnary) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *SCPRequestUnary) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SCPRequestUnary) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SCPRequestUnary) GetFiles() *File {
	if m != nil {
		return m.Files
	}
	return nil
}

type SCPResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Path                 string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SCPResponse) Reset()         { *m = SCPResponse{} }
func (m *SCPResponse) String() string { return proto.CompactTextString(m) }
func (*SCPResponse) ProtoMessage()    {}
func (*SCPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{15}
}

func (m *SCPResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SCPResponse.Unmarshal(m, b)
}
func (m *SCPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SCPResponse.Marshal(b, m, deterministic)
}
func (m *SCPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCPResponse.Merge(m, src)
}
func (m *SCPResponse) XXX_Size() int {
	return xxx_messageInfo_SCPResponse.Size(m)
}
func (m *SCPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SCPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SCPResponse proto.InternalMessageInfo

func (m *SCPResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SCPResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *SCPResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SCPResponse) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*PingMessage)(nil), "agent_api.PingMessage")
	proto.RegisterType((*Chunk)(nil), "agent_api.Chunk")
	proto.RegisterType((*ExecKubectlRequest)(nil), "agent_api.ExecKubectlRequest")
	proto.RegisterType((*ExecKubectlResponse)(nil), "agent_api.ExecKubectlResponse")
	proto.RegisterType((*CreateFileRequest)(nil), "agent_api.CreateFileRequest")
	proto.RegisterType((*File)(nil), "agent_api.File")
	proto.RegisterType((*FileResponse)(nil), "agent_api.FileResponse")
	proto.RegisterType((*HttpRequest)(nil), "agent_api.HttpRequest")
	proto.RegisterType((*Headers)(nil), "agent_api.Headers")
	proto.RegisterType((*HttpResponse)(nil), "agent_api.HttpResponse")
	proto.RegisterType((*SSHRequest)(nil), "agent_api.SSHRequest")
	proto.RegisterType((*SSHRequestUnary)(nil), "agent_api.SSHRequestUnary")
	proto.RegisterType((*SSHResponse)(nil), "agent_api.SSHResponse")
	proto.RegisterType((*SCPRequest)(nil), "agent_api.SCPRequest")
	proto.RegisterType((*SCPRequestUnary)(nil), "agent_api.SCPRequestUnary")
	proto.RegisterType((*SCPResponse)(nil), "agent_api.SCPResponse")
}

func init() { proto.RegisterFile("agent.proto", fileDescriptor_56ede974c0020f77) }

var fileDescriptor_56ede974c0020f77 = []byte{
	// 733 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x4f, 0xdb, 0x4c,
	0x10, 0xc6, 0xc4, 0x21, 0x64, 0x1c, 0xbd, 0x81, 0x7d, 0x29, 0x8d, 0xa2, 0x52, 0xa1, 0x95, 0x90,
	0xa8, 0x54, 0x21, 0x4a, 0x0f, 0xbd, 0xb4, 0x07, 0x08, 0xa0, 0x48, 0x55, 0x51, 0x64, 0xb7, 0x3d,
	0x55, 0xaa, 0x96, 0x78, 0x1a, 0x22, 0x1c, 0x3b, 0xac, 0xd7, 0xb4, 0x39, 0xf7, 0xd6, 0x9f, 0xd7,
	0x5f, 0x54, 0xed, 0x87, 0xed, 0x75, 0x49, 0x0a, 0x08, 0x6e, 0xf3, 0xb1, 0xfb, 0x3c, 0xcf, 0x8c,
	0x33, 0xb3, 0x01, 0x8f, 0x8d, 0x30, 0x16, 0x7b, 0x53, 0x9e, 0x88, 0x84, 0x34, 0x95, 0xf3, 0x95,
	0x4d, 0xc7, 0xf4, 0x05, 0x78, 0x83, 0x71, 0x3c, 0xfa, 0x80, 0x69, 0xca, 0x46, 0x48, 0xba, 0xb0,
	0x3a, 0xe2, 0x88, 0x62, 0x1c, 0x8f, 0x3a, 0xce, 0xb6, 0xb3, 0xdb, 0xf4, 0x0b, 0x9f, 0x6e, 0x41,
	0xbd, 0x77, 0x91, 0xc5, 0x97, 0x64, 0x03, 0xea, 0x43, 0x69, 0xa8, 0x13, 0x2d, 0x5f, 0x3b, 0xf4,
	0x08, 0xc8, 0xc9, 0x0f, 0x1c, 0xbe, 0xcf, 0xce, 0x71, 0x28, 0x22, 0x1f, 0xaf, 0x32, 0x4c, 0x05,
	0xe9, 0x40, 0x63, 0x98, 0x4c, 0x26, 0x2c, 0x0e, 0x0d, 0x5e, 0xee, 0x12, 0x02, 0x2e, 0xe3, 0xa3,
	0xb4, 0xb3, 0xbc, 0x5d, 0xdb, 0x6d, 0xfa, 0xca, 0xa6, 0xdf, 0xe1, 0xff, 0x0a, 0x46, 0x3a, 0x4d,
	0xe2, 0x14, 0xc9, 0x26, 0xac, 0xa4, 0x82, 0x89, 0x2c, 0x35, 0x18, 0xc6, 0xd3, 0xf1, 0x30, 0xc9,
	0x84, 0x01, 0x31, 0x9e, 0x89, 0x23, 0xe7, 0x9d, 0x5a, 0x11, 0x47, 0xce, 0x6d, 0x31, 0x6e, 0x45,
	0x0c, 0x3d, 0x83, 0xf5, 0x1e, 0x47, 0x26, 0xf0, 0x74, 0x1c, 0x61, 0xae, 0x9d, 0x80, 0x1b, 0xb3,
	0x09, 0x1a, 0x52, 0x65, 0x93, 0x1d, 0xa8, 0x7f, 0x1b, 0x47, 0xa8, 0x65, 0x7b, 0x07, 0xed, 0xbd,
	0xa2, 0x95, 0x7b, 0xea, 0xaa, 0xce, 0xd2, 0x23, 0x70, 0xa5, 0x3b, 0x17, 0x82, 0x80, 0x3b, 0x65,
	0xe2, 0xa2, 0xb3, 0xac, 0x63, 0xd2, 0x96, 0xb1, 0x90, 0x09, 0xd6, 0xa9, 0xe9, 0x98, 0xb4, 0x69,
	0x08, 0x2d, 0xad, 0xe6, 0x96, 0x2e, 0x6c, 0x40, 0x1d, 0x39, 0x4f, 0xb8, 0x69, 0x82, 0x76, 0x0a,
	0xe6, 0xda, 0x1c, 0x66, 0xb7, 0x64, 0xa6, 0x3f, 0x1d, 0xf0, 0xfa, 0x42, 0x4c, 0xf3, 0xa2, 0xd7,
	0xa0, 0x96, 0xf1, 0xc8, 0x50, 0x48, 0x93, 0x6c, 0x83, 0xc7, 0x75, 0xf2, 0xe3, 0x6c, 0x8a, 0x46,
	0xb6, 0x1d, 0x22, 0x2f, 0xa1, 0x71, 0x81, 0x2c, 0x44, 0x9e, 0xaa, 0x86, 0x7b, 0x07, 0xc4, 0x6a,
	0x4b, 0x5f, 0x67, 0xfc, 0xfc, 0x88, 0x54, 0x71, 0x9e, 0x84, 0xb3, 0x5c, 0x85, 0xb4, 0xe9, 0x2b,
	0x68, 0x98, 0x73, 0x52, 0xc0, 0x25, 0xce, 0x72, 0x01, 0x97, 0x38, 0x93, 0x05, 0x5e, 0xb3, 0x28,
	0xcb, 0xa9, 0xb5, 0x43, 0x7f, 0x39, 0xd0, 0xd2, 0xc2, 0x4d, 0x7f, 0x72, 0x5c, 0xfd, 0xab, 0x54,
	0xb6, 0xdd, 0x1b, 0xa7, 0xec, 0x0d, 0x85, 0x16, 0x37, 0xb7, 0x7a, 0x49, 0xa8, 0x7b, 0x54, 0xf7,
	0x2b, 0x31, 0xbb, 0x26, 0xf7, 0xd6, 0x9a, 0xe8, 0x17, 0x80, 0x20, 0xe8, 0xe7, 0x3d, 0x94, 0x5f,
	0x0a, 0xf9, 0x35, 0xf2, 0xe2, 0x4b, 0x29, 0x4f, 0x2a, 0xcc, 0x52, 0xcc, 0xc5, 0x28, 0x3b, 0x2f,
	0xb7, 0x56, 0x96, 0xbb, 0x06, 0xb5, 0xe1, 0x24, 0x54, 0xac, 0x4d, 0x5f, 0x9a, 0x94, 0x41, 0xbb,
	0x44, 0xff, 0x14, 0x33, 0x3e, 0x7b, 0x2c, 0x0a, 0x27, 0xa7, 0x48, 0xc0, 0x53, 0x14, 0xf7, 0x98,
	0x38, 0x67, 0xc1, 0xc4, 0x39, 0x77, 0x9a, 0xb8, 0x2b, 0x80, 0xa0, 0x37, 0x78, 0x9c, 0x8e, 0xed,
	0x40, 0xfd, 0x54, 0x0d, 0xa5, 0xbb, 0x60, 0x28, 0x55, 0x96, 0x5e, 0x43, 0xbb, 0xa4, 0x7c, 0x8c,
	0x36, 0x5a, 0xbc, 0xce, 0x3f, 0x78, 0x87, 0xe0, 0x29, 0xde, 0xbb, 0xcf, 0xb1, 0x73, 0xef, 0x39,
	0x3e, 0xf8, 0xbd, 0x02, 0xde, 0xa1, 0xa4, 0x0f, 0x74, 0x05, 0x27, 0x00, 0xe5, 0x46, 0x23, 0xcf,
	0x2c, 0x69, 0x37, 0x16, 0x5d, 0xf7, 0xe9, 0xdf, 0xc2, 0x8d, 0x54, 0xba, 0x24, 0x61, 0x8e, 0x31,
	0xc2, 0x87, 0xc2, 0x9c, 0x81, 0x67, 0x2d, 0x76, 0xb2, 0x65, 0x9d, 0xbc, 0xf9, 0x68, 0x74, 0x9f,
	0x2f, 0x4a, 0x17, 0x78, 0x9f, 0x61, 0xdd, 0x4a, 0x04, 0x82, 0x23, 0x9b, 0x3c, 0x18, 0x75, 0xdf,
	0x21, 0xef, 0x60, 0x55, 0xa6, 0xe4, 0x5e, 0x21, 0x9b, 0xf6, 0xc0, 0x97, 0x1b, 0xb2, 0x52, 0xa6,
	0xbd, 0x80, 0x54, 0xb7, 0xfe, 0xcb, 0xaf, 0x1b, 0x4d, 0xf7, 0x07, 0xd9, 0x77, 0xc8, 0x1b, 0x68,
	0xa8, 0x97, 0x16, 0xf9, 0xc2, 0xfb, 0x6b, 0xf6, 0x97, 0x50, 0xef, 0xaf, 0xbc, 0xf8, 0x16, 0x56,
	0x03, 0x36, 0xeb, 0x63, 0x14, 0x25, 0x95, 0x9b, 0xd6, 0x13, 0xdf, 0x5d, 0x10, 0xa7, 0x4b, 0xe4,
	0x18, 0xda, 0x3e, 0x4e, 0x12, 0x81, 0x41, 0xd0, 0x37, 0xf2, 0x9f, 0x58, 0x87, 0xcb, 0x15, 0x54,
	0xc1, 0xb0, 0xd6, 0x86, 0xd2, 0x50, 0xa2, 0xf4, 0x06, 0xf3, 0x50, 0x8a, 0x09, 0xac, 0xa2, 0x94,
	0x03, 0xa2, 0x50, 0x0e, 0xa1, 0x59, 0x68, 0x21, 0xdd, 0xb9, 0x2a, 0xd4, 0x04, 0x2f, 0x96, 0x62,
	0x41, 0xf4, 0x06, 0x55, 0x88, 0xea, 0x12, 0x58, 0xac, 0xe3, 0x7c, 0x45, 0xfd, 0x5f, 0x7a, 0xfd,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xa5, 0xce, 0xb0, 0x3e, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgentServerClient is the client API for AgentServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentServerClient interface {
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	DeleteFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	ExecKubectl(ctx context.Context, in *ExecKubectlRequest, opts ...grpc.CallOption) (*ExecKubectlResponse, error)
	ExecKubectlStream(ctx context.Context, in *ExecKubectlRequest, opts ...grpc.CallOption) (AgentServer_ExecKubectlStreamClient, error)
	ExecHttp(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (*HttpResponse, error)
	ExecHttpStream(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (AgentServer_ExecHttpStreamClient, error)
	Chunker(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (AgentServer_ChunkerClient, error)
	SayHello(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
	//
	RemoteSSHStream(ctx context.Context, in *SSHRequest, opts ...grpc.CallOption) (AgentServer_RemoteSSHStreamClient, error)
	RemoteSCPStream(ctx context.Context, in *SCPRequest, opts ...grpc.CallOption) (AgentServer_RemoteSCPStreamClient, error)
	RemoteSSH(ctx context.Context, in *SSHRequestUnary, opts ...grpc.CallOption) (*SSHResponse, error)
	RemoteSCP(ctx context.Context, in *SCPRequestUnary, opts ...grpc.CallOption) (*SCPResponse, error)
}

type agentServerClient struct {
	cc *grpc.ClientConn
}

func NewAgentServerClient(cc *grpc.ClientConn) AgentServerClient {
	return &agentServerClient{cc}
}

func (c *agentServerClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/agent_api.AgentServer/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServerClient) DeleteFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/agent_api.AgentServer/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServerClient) ExecKubectl(ctx context.Context, in *ExecKubectlRequest, opts ...grpc.CallOption) (*ExecKubectlResponse, error) {
	out := new(ExecKubectlResponse)
	err := c.cc.Invoke(ctx, "/agent_api.AgentServer/ExecKubectl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServerClient) ExecKubectlStream(ctx context.Context, in *ExecKubectlRequest, opts ...grpc.CallOption) (AgentServer_ExecKubectlStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgentServer_serviceDesc.Streams[0], "/agent_api.AgentServer/ExecKubectlStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServerExecKubectlStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentServer_ExecKubectlStreamClient interface {
	Recv() (*ExecKubectlResponse, error)
	grpc.ClientStream
}

type agentServerExecKubectlStreamClient struct {
	grpc.ClientStream
}

func (x *agentServerExecKubectlStreamClient) Recv() (*ExecKubectlResponse, error) {
	m := new(ExecKubectlResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentServerClient) ExecHttp(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (*HttpResponse, error) {
	out := new(HttpResponse)
	err := c.cc.Invoke(ctx, "/agent_api.AgentServer/ExecHttp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServerClient) ExecHttpStream(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (AgentServer_ExecHttpStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgentServer_serviceDesc.Streams[1], "/agent_api.AgentServer/ExecHttpStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServerExecHttpStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentServer_ExecHttpStreamClient interface {
	Recv() (*HttpResponse, error)
	grpc.ClientStream
}

type agentServerExecHttpStreamClient struct {
	grpc.ClientStream
}

func (x *agentServerExecHttpStreamClient) Recv() (*HttpResponse, error) {
	m := new(HttpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentServerClient) Chunker(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (AgentServer_ChunkerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgentServer_serviceDesc.Streams[2], "/agent_api.AgentServer/Chunker", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServerChunkerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentServer_ChunkerClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type agentServerChunkerClient struct {
	grpc.ClientStream
}

func (x *agentServerChunkerClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentServerClient) SayHello(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, "/agent_api.AgentServer/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServerClient) RemoteSSHStream(ctx context.Context, in *SSHRequest, opts ...grpc.CallOption) (AgentServer_RemoteSSHStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgentServer_serviceDesc.Streams[3], "/agent_api.AgentServer/RemoteSSHStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServerRemoteSSHStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentServer_RemoteSSHStreamClient interface {
	Recv() (*SSHResponse, error)
	grpc.ClientStream
}

type agentServerRemoteSSHStreamClient struct {
	grpc.ClientStream
}

func (x *agentServerRemoteSSHStreamClient) Recv() (*SSHResponse, error) {
	m := new(SSHResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentServerClient) RemoteSCPStream(ctx context.Context, in *SCPRequest, opts ...grpc.CallOption) (AgentServer_RemoteSCPStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgentServer_serviceDesc.Streams[4], "/agent_api.AgentServer/RemoteSCPStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServerRemoteSCPStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentServer_RemoteSCPStreamClient interface {
	Recv() (*SCPResponse, error)
	grpc.ClientStream
}

type agentServerRemoteSCPStreamClient struct {
	grpc.ClientStream
}

func (x *agentServerRemoteSCPStreamClient) Recv() (*SCPResponse, error) {
	m := new(SCPResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentServerClient) RemoteSSH(ctx context.Context, in *SSHRequestUnary, opts ...grpc.CallOption) (*SSHResponse, error) {
	out := new(SSHResponse)
	err := c.cc.Invoke(ctx, "/agent_api.AgentServer/RemoteSSH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServerClient) RemoteSCP(ctx context.Context, in *SCPRequestUnary, opts ...grpc.CallOption) (*SCPResponse, error) {
	out := new(SCPResponse)
	err := c.cc.Invoke(ctx, "/agent_api.AgentServer/RemoteSCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServerServer is the server API for AgentServer service.
type AgentServerServer interface {
	CreateFile(context.Context, *CreateFileRequest) (*FileResponse, error)
	DeleteFile(context.Context, *CreateFileRequest) (*FileResponse, error)
	ExecKubectl(context.Context, *ExecKubectlRequest) (*ExecKubectlResponse, error)
	ExecKubectlStream(*ExecKubectlRequest, AgentServer_ExecKubectlStreamServer) error
	ExecHttp(context.Context, *HttpRequest) (*HttpResponse, error)
	ExecHttpStream(*HttpRequest, AgentServer_ExecHttpStreamServer) error
	Chunker(*HttpRequest, AgentServer_ChunkerServer) error
	SayHello(context.Context, *PingMessage) (*PingMessage, error)
	//
	RemoteSSHStream(*SSHRequest, AgentServer_RemoteSSHStreamServer) error
	RemoteSCPStream(*SCPRequest, AgentServer_RemoteSCPStreamServer) error
	RemoteSSH(context.Context, *SSHRequestUnary) (*SSHResponse, error)
	RemoteSCP(context.Context, *SCPRequestUnary) (*SCPResponse, error)
}

// UnimplementedAgentServerServer can be embedded to have forward compatible implementations.
type UnimplementedAgentServerServer struct {
}

func (*UnimplementedAgentServerServer) CreateFile(ctx context.Context, req *CreateFileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (*UnimplementedAgentServerServer) DeleteFile(ctx context.Context, req *CreateFileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (*UnimplementedAgentServerServer) ExecKubectl(ctx context.Context, req *ExecKubectlRequest) (*ExecKubectlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecKubectl not implemented")
}
func (*UnimplementedAgentServerServer) ExecKubectlStream(req *ExecKubectlRequest, srv AgentServer_ExecKubectlStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecKubectlStream not implemented")
}
func (*UnimplementedAgentServerServer) ExecHttp(ctx context.Context, req *HttpRequest) (*HttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecHttp not implemented")
}
func (*UnimplementedAgentServerServer) ExecHttpStream(req *HttpRequest, srv AgentServer_ExecHttpStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecHttpStream not implemented")
}
func (*UnimplementedAgentServerServer) Chunker(req *HttpRequest, srv AgentServer_ChunkerServer) error {
	return status.Errorf(codes.Unimplemented, "method Chunker not implemented")
}
func (*UnimplementedAgentServerServer) SayHello(ctx context.Context, req *PingMessage) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedAgentServerServer) RemoteSSHStream(req *SSHRequest, srv AgentServer_RemoteSSHStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RemoteSSHStream not implemented")
}
func (*UnimplementedAgentServerServer) RemoteSCPStream(req *SCPRequest, srv AgentServer_RemoteSCPStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RemoteSCPStream not implemented")
}
func (*UnimplementedAgentServerServer) RemoteSSH(ctx context.Context, req *SSHRequestUnary) (*SSHResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteSSH not implemented")
}
func (*UnimplementedAgentServerServer) RemoteSCP(ctx context.Context, req *SCPRequestUnary) (*SCPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteSCP not implemented")
}

func RegisterAgentServerServer(s *grpc.Server, srv AgentServerServer) {
	s.RegisterService(&_AgentServer_serviceDesc, srv)
}

func _AgentServer_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServerServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent_api.AgentServer/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServerServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentServer_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent_api.AgentServer/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServerServer).DeleteFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentServer_ExecKubectl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecKubectlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServerServer).ExecKubectl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent_api.AgentServer/ExecKubectl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServerServer).ExecKubectl(ctx, req.(*ExecKubectlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentServer_ExecKubectlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecKubectlRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServerServer).ExecKubectlStream(m, &agentServerExecKubectlStreamServer{stream})
}

type AgentServer_ExecKubectlStreamServer interface {
	Send(*ExecKubectlResponse) error
	grpc.ServerStream
}

type agentServerExecKubectlStreamServer struct {
	grpc.ServerStream
}

func (x *agentServerExecKubectlStreamServer) Send(m *ExecKubectlResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentServer_ExecHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServerServer).ExecHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent_api.AgentServer/ExecHttp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServerServer).ExecHttp(ctx, req.(*HttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentServer_ExecHttpStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HttpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServerServer).ExecHttpStream(m, &agentServerExecHttpStreamServer{stream})
}

type AgentServer_ExecHttpStreamServer interface {
	Send(*HttpResponse) error
	grpc.ServerStream
}

type agentServerExecHttpStreamServer struct {
	grpc.ServerStream
}

func (x *agentServerExecHttpStreamServer) Send(m *HttpResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentServer_Chunker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HttpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServerServer).Chunker(m, &agentServerChunkerServer{stream})
}

type AgentServer_ChunkerServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type agentServerChunkerServer struct {
	grpc.ServerStream
}

func (x *agentServerChunkerServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentServer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent_api.AgentServer/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServerServer).SayHello(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentServer_RemoteSSHStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SSHRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServerServer).RemoteSSHStream(m, &agentServerRemoteSSHStreamServer{stream})
}

type AgentServer_RemoteSSHStreamServer interface {
	Send(*SSHResponse) error
	grpc.ServerStream
}

type agentServerRemoteSSHStreamServer struct {
	grpc.ServerStream
}

func (x *agentServerRemoteSSHStreamServer) Send(m *SSHResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentServer_RemoteSCPStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SCPRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServerServer).RemoteSCPStream(m, &agentServerRemoteSCPStreamServer{stream})
}

type AgentServer_RemoteSCPStreamServer interface {
	Send(*SCPResponse) error
	grpc.ServerStream
}

type agentServerRemoteSCPStreamServer struct {
	grpc.ServerStream
}

func (x *agentServerRemoteSCPStreamServer) Send(m *SCPResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentServer_RemoteSSH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHRequestUnary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServerServer).RemoteSSH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent_api.AgentServer/RemoteSSH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServerServer).RemoteSSH(ctx, req.(*SSHRequestUnary))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentServer_RemoteSCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SCPRequestUnary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServerServer).RemoteSCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent_api.AgentServer/RemoteSCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServerServer).RemoteSCP(ctx, req.(*SCPRequestUnary))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agent_api.AgentServer",
	HandlerType: (*AgentServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFile",
			Handler:    _AgentServer_CreateFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _AgentServer_DeleteFile_Handler,
		},
		{
			MethodName: "ExecKubectl",
			Handler:    _AgentServer_ExecKubectl_Handler,
		},
		{
			MethodName: "ExecHttp",
			Handler:    _AgentServer_ExecHttp_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _AgentServer_SayHello_Handler,
		},
		{
			MethodName: "RemoteSSH",
			Handler:    _AgentServer_RemoteSSH_Handler,
		},
		{
			MethodName: "RemoteSCP",
			Handler:    _AgentServer_RemoteSCP_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecKubectlStream",
			Handler:       _AgentServer_ExecKubectlStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecHttpStream",
			Handler:       _AgentServer_ExecHttpStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Chunker",
			Handler:       _AgentServer_Chunker_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RemoteSSHStream",
			Handler:       _AgentServer_RemoteSSHStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RemoteSCPStream",
			Handler:       _AgentServer_RemoteSCPStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent.proto",
}
